
eureka:
  client:
    #由于该应用为注册中心，所以设置为false，代表不向注册中心注册自己
    fetch-registry: false
    # 由于注册中心的职责就是维护服务实例，他并不需要去检索服务，所以也设置为false
    register-with-eureka: false
    service-url:
      defaultZone: http://eureka7001.com:7002/eureka/,http://eureka7002.com:7003/eureka/
  instance:
    hostname: eureka7003.com
  server:
    #配置属性，但由于 Eureka 自我保护模式以及心跳周期长的原因，经常会遇到 Eureka Server 不剔除已关停的节点的问题
    # 关闭自我保护 ,建议不要关掉自我保护机制,Eureka默认保90
    #  Eureka保证系统的可用性，但不保证系统里面数据的一致性， 举个例子。当发生网络分区的时候，
    # Eureka-Server和client端的通信被终止，server端收不到大部分的client的续约，这个时候，如果
    # 直接将没有收到心跳的client端自动剔除，那么会将可用的client端剔除，这不符合AP理论，所以Eureka宁可
    # 保留也许已经宕机了的client端 ， 也不愿意将可以用的client端一起剔除。 从这一点上，也就保证了Eureka程序的健壮性，
    # 符合AP理论
    enable-self-preservation: false
    #清理间隔（单位毫秒，默认是60*1000）
    eviction-interval-timer-in-ms: 5000

server:
  port: 7003

    #security.basic.enabled=true

    #security.user.name=snjx
    #security.user.password=snjx




